/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: openai.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
export class ChatCompletion extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        object?: string;
        created?: number;
        model?: string;
        choices?: ChatCompletion.Choices[];
        usage?: ChatCompletion.Usage;
        service_tier?: string;
        system_fingerprint?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("object" in data && data.object != undefined) {
                this.object = data.object;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("model" in data && data.model != undefined) {
                this.model = data.model;
            }
            if ("choices" in data && data.choices != undefined) {
                this.choices = data.choices;
            }
            if ("usage" in data && data.usage != undefined) {
                this.usage = data.usage;
            }
            if ("service_tier" in data && data.service_tier != undefined) {
                this.service_tier = data.service_tier;
            }
            if ("system_fingerprint" in data && data.system_fingerprint != undefined) {
                this.system_fingerprint = data.system_fingerprint;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get object() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set object(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get created() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set created(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get model() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set model(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get choices() {
        return pb_1.Message.getRepeatedWrapperField(this, ChatCompletion.Choices, 5) as ChatCompletion.Choices[];
    }
    set choices(value: ChatCompletion.Choices[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get usage() {
        return pb_1.Message.getWrapperField(this, ChatCompletion.Usage, 6) as ChatCompletion.Usage;
    }
    set usage(value: ChatCompletion.Usage) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_usage() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get service_tier() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set service_tier(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get system_fingerprint() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set system_fingerprint(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        object?: string;
        created?: number;
        model?: string;
        choices?: ReturnType<typeof ChatCompletion.Choices.prototype.toObject>[];
        usage?: ReturnType<typeof ChatCompletion.Usage.prototype.toObject>;
        service_tier?: string;
        system_fingerprint?: string;
    }): ChatCompletion {
        const message = new ChatCompletion({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.object != null) {
            message.object = data.object;
        }
        if (data.created != null) {
            message.created = data.created;
        }
        if (data.model != null) {
            message.model = data.model;
        }
        if (data.choices != null) {
            message.choices = data.choices.map(item => ChatCompletion.Choices.fromObject(item));
        }
        if (data.usage != null) {
            message.usage = ChatCompletion.Usage.fromObject(data.usage);
        }
        if (data.service_tier != null) {
            message.service_tier = data.service_tier;
        }
        if (data.system_fingerprint != null) {
            message.system_fingerprint = data.system_fingerprint;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            object?: string;
            created?: number;
            model?: string;
            choices?: ReturnType<typeof ChatCompletion.Choices.prototype.toObject>[];
            usage?: ReturnType<typeof ChatCompletion.Usage.prototype.toObject>;
            service_tier?: string;
            system_fingerprint?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.object != null) {
            data.object = this.object;
        }
        if (this.created != null) {
            data.created = this.created;
        }
        if (this.model != null) {
            data.model = this.model;
        }
        if (this.choices != null) {
            data.choices = this.choices.map((item: ChatCompletion.Choices) => item.toObject());
        }
        if (this.usage != null) {
            data.usage = this.usage.toObject();
        }
        if (this.service_tier != null) {
            data.service_tier = this.service_tier;
        }
        if (this.system_fingerprint != null) {
            data.system_fingerprint = this.system_fingerprint;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.object.length)
            writer.writeString(2, this.object);
        if (this.created != 0)
            writer.writeUint32(3, this.created);
        if (this.model.length)
            writer.writeString(4, this.model);
        if (this.choices.length)
            writer.writeRepeatedMessage(5, this.choices, (item: ChatCompletion.Choices) => item.serialize(writer));
        if (this.has_usage)
            writer.writeMessage(6, this.usage, () => this.usage.serialize(writer));
        if (this.service_tier.length)
            writer.writeString(7, this.service_tier);
        if (this.system_fingerprint.length)
            writer.writeString(8, this.system_fingerprint);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatCompletion {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatCompletion();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.object = reader.readString();
                    break;
                case 3:
                    message.created = reader.readUint32();
                    break;
                case 4:
                    message.model = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.choices, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ChatCompletion.Choices.deserialize(reader), ChatCompletion.Choices));
                    break;
                case 6:
                    reader.readMessage(message.usage, () => message.usage = ChatCompletion.Usage.deserialize(reader));
                    break;
                case 7:
                    message.service_tier = reader.readString();
                    break;
                case 8:
                    message.system_fingerprint = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatCompletion {
        return ChatCompletion.deserialize(bytes);
    }
}
export namespace ChatCompletion {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: string;
            content?: string;
            refusal?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("refusal" in data && data.refusal != undefined) {
                    this.refusal = data.refusal;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get refusal() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set refusal(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            role?: string;
            content?: string;
            refusal?: string;
        }): Message {
            const message = new Message({});
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.refusal != null) {
                message.refusal = data.refusal;
            }
            return message;
        }
        toObject() {
            const data: {
                role?: string;
                content?: string;
                refusal?: string;
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.refusal != null) {
                data.refusal = this.refusal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role.length)
                writer.writeString(1, this.role);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.refusal.length)
                writer.writeString(3, this.refusal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.refusal = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class Choices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            message?: ChatCompletion.Message;
            finish_reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("finish_reason" in data && data.finish_reason != undefined) {
                    this.finish_reason = data.finish_reason;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getWrapperField(this, ChatCompletion.Message, 2) as ChatCompletion.Message;
        }
        set message(value: ChatCompletion.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get finish_reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set finish_reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            index?: number;
            message?: ReturnType<typeof ChatCompletion.Message.prototype.toObject>;
            finish_reason?: string;
        }): Choices {
            const message = new Choices({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.message != null) {
                message.message = ChatCompletion.Message.fromObject(data.message);
            }
            if (data.finish_reason != null) {
                message.finish_reason = data.finish_reason;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                message?: ReturnType<typeof ChatCompletion.Message.prototype.toObject>;
                finish_reason?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.finish_reason != null) {
                data.finish_reason = this.finish_reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeUint32(1, this.index);
            if (this.has_message)
                writer.writeMessage(2, this.message, () => this.message.serialize(writer));
            if (this.finish_reason.length)
                writer.writeString(3, this.finish_reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Choices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Choices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.message, () => message.message = ChatCompletion.Message.deserialize(reader));
                        break;
                    case 3:
                        message.finish_reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Choices {
            return Choices.deserialize(bytes);
        }
    }
    export class Prompt_tokens_details extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cached_tokens?: number;
            audio_tokens?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cached_tokens" in data && data.cached_tokens != undefined) {
                    this.cached_tokens = data.cached_tokens;
                }
                if ("audio_tokens" in data && data.audio_tokens != undefined) {
                    this.audio_tokens = data.audio_tokens;
                }
            }
        }
        get cached_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set cached_tokens(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get audio_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set audio_tokens(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            cached_tokens?: number;
            audio_tokens?: number;
        }): Prompt_tokens_details {
            const message = new Prompt_tokens_details({});
            if (data.cached_tokens != null) {
                message.cached_tokens = data.cached_tokens;
            }
            if (data.audio_tokens != null) {
                message.audio_tokens = data.audio_tokens;
            }
            return message;
        }
        toObject() {
            const data: {
                cached_tokens?: number;
                audio_tokens?: number;
            } = {};
            if (this.cached_tokens != null) {
                data.cached_tokens = this.cached_tokens;
            }
            if (this.audio_tokens != null) {
                data.audio_tokens = this.audio_tokens;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cached_tokens != 0)
                writer.writeUint32(1, this.cached_tokens);
            if (this.audio_tokens != 0)
                writer.writeUint32(2, this.audio_tokens);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prompt_tokens_details {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prompt_tokens_details();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cached_tokens = reader.readUint32();
                        break;
                    case 2:
                        message.audio_tokens = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Prompt_tokens_details {
            return Prompt_tokens_details.deserialize(bytes);
        }
    }
    export class Completion_tokens_details extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reasoning_tokens?: number;
            audio_tokens?: number;
            accepted_prediction_tokens?: number;
            rejected_prediction_tokens?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reasoning_tokens" in data && data.reasoning_tokens != undefined) {
                    this.reasoning_tokens = data.reasoning_tokens;
                }
                if ("audio_tokens" in data && data.audio_tokens != undefined) {
                    this.audio_tokens = data.audio_tokens;
                }
                if ("accepted_prediction_tokens" in data && data.accepted_prediction_tokens != undefined) {
                    this.accepted_prediction_tokens = data.accepted_prediction_tokens;
                }
                if ("rejected_prediction_tokens" in data && data.rejected_prediction_tokens != undefined) {
                    this.rejected_prediction_tokens = data.rejected_prediction_tokens;
                }
            }
        }
        get reasoning_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set reasoning_tokens(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get audio_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set audio_tokens(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get accepted_prediction_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set accepted_prediction_tokens(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rejected_prediction_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set rejected_prediction_tokens(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            reasoning_tokens?: number;
            audio_tokens?: number;
            accepted_prediction_tokens?: number;
            rejected_prediction_tokens?: number;
        }): Completion_tokens_details {
            const message = new Completion_tokens_details({});
            if (data.reasoning_tokens != null) {
                message.reasoning_tokens = data.reasoning_tokens;
            }
            if (data.audio_tokens != null) {
                message.audio_tokens = data.audio_tokens;
            }
            if (data.accepted_prediction_tokens != null) {
                message.accepted_prediction_tokens = data.accepted_prediction_tokens;
            }
            if (data.rejected_prediction_tokens != null) {
                message.rejected_prediction_tokens = data.rejected_prediction_tokens;
            }
            return message;
        }
        toObject() {
            const data: {
                reasoning_tokens?: number;
                audio_tokens?: number;
                accepted_prediction_tokens?: number;
                rejected_prediction_tokens?: number;
            } = {};
            if (this.reasoning_tokens != null) {
                data.reasoning_tokens = this.reasoning_tokens;
            }
            if (this.audio_tokens != null) {
                data.audio_tokens = this.audio_tokens;
            }
            if (this.accepted_prediction_tokens != null) {
                data.accepted_prediction_tokens = this.accepted_prediction_tokens;
            }
            if (this.rejected_prediction_tokens != null) {
                data.rejected_prediction_tokens = this.rejected_prediction_tokens;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reasoning_tokens != 0)
                writer.writeUint32(1, this.reasoning_tokens);
            if (this.audio_tokens != 0)
                writer.writeUint32(2, this.audio_tokens);
            if (this.accepted_prediction_tokens != 0)
                writer.writeUint32(3, this.accepted_prediction_tokens);
            if (this.rejected_prediction_tokens != 0)
                writer.writeUint32(4, this.rejected_prediction_tokens);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Completion_tokens_details {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Completion_tokens_details();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reasoning_tokens = reader.readUint32();
                        break;
                    case 2:
                        message.audio_tokens = reader.readUint32();
                        break;
                    case 3:
                        message.accepted_prediction_tokens = reader.readUint32();
                        break;
                    case 4:
                        message.rejected_prediction_tokens = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Completion_tokens_details {
            return Completion_tokens_details.deserialize(bytes);
        }
    }
    export class Usage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prompt_tokens?: number;
            completion_tokens?: number;
            total_tokens?: number;
            prompt_tokens_details?: ChatCompletion.Prompt_tokens_details;
            completion_tokens_details?: ChatCompletion.Completion_tokens_details;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prompt_tokens" in data && data.prompt_tokens != undefined) {
                    this.prompt_tokens = data.prompt_tokens;
                }
                if ("completion_tokens" in data && data.completion_tokens != undefined) {
                    this.completion_tokens = data.completion_tokens;
                }
                if ("total_tokens" in data && data.total_tokens != undefined) {
                    this.total_tokens = data.total_tokens;
                }
                if ("prompt_tokens_details" in data && data.prompt_tokens_details != undefined) {
                    this.prompt_tokens_details = data.prompt_tokens_details;
                }
                if ("completion_tokens_details" in data && data.completion_tokens_details != undefined) {
                    this.completion_tokens_details = data.completion_tokens_details;
                }
            }
        }
        get prompt_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set prompt_tokens(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get completion_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set completion_tokens(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_tokens(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get prompt_tokens_details() {
            return pb_1.Message.getWrapperField(this, ChatCompletion.Prompt_tokens_details, 4) as ChatCompletion.Prompt_tokens_details;
        }
        set prompt_tokens_details(value: ChatCompletion.Prompt_tokens_details) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_prompt_tokens_details() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get completion_tokens_details() {
            return pb_1.Message.getWrapperField(this, ChatCompletion.Completion_tokens_details, 5) as ChatCompletion.Completion_tokens_details;
        }
        set completion_tokens_details(value: ChatCompletion.Completion_tokens_details) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_completion_tokens_details() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            prompt_tokens?: number;
            completion_tokens?: number;
            total_tokens?: number;
            prompt_tokens_details?: ReturnType<typeof ChatCompletion.Prompt_tokens_details.prototype.toObject>;
            completion_tokens_details?: ReturnType<typeof ChatCompletion.Completion_tokens_details.prototype.toObject>;
        }): Usage {
            const message = new Usage({});
            if (data.prompt_tokens != null) {
                message.prompt_tokens = data.prompt_tokens;
            }
            if (data.completion_tokens != null) {
                message.completion_tokens = data.completion_tokens;
            }
            if (data.total_tokens != null) {
                message.total_tokens = data.total_tokens;
            }
            if (data.prompt_tokens_details != null) {
                message.prompt_tokens_details = ChatCompletion.Prompt_tokens_details.fromObject(data.prompt_tokens_details);
            }
            if (data.completion_tokens_details != null) {
                message.completion_tokens_details = ChatCompletion.Completion_tokens_details.fromObject(data.completion_tokens_details);
            }
            return message;
        }
        toObject() {
            const data: {
                prompt_tokens?: number;
                completion_tokens?: number;
                total_tokens?: number;
                prompt_tokens_details?: ReturnType<typeof ChatCompletion.Prompt_tokens_details.prototype.toObject>;
                completion_tokens_details?: ReturnType<typeof ChatCompletion.Completion_tokens_details.prototype.toObject>;
            } = {};
            if (this.prompt_tokens != null) {
                data.prompt_tokens = this.prompt_tokens;
            }
            if (this.completion_tokens != null) {
                data.completion_tokens = this.completion_tokens;
            }
            if (this.total_tokens != null) {
                data.total_tokens = this.total_tokens;
            }
            if (this.prompt_tokens_details != null) {
                data.prompt_tokens_details = this.prompt_tokens_details.toObject();
            }
            if (this.completion_tokens_details != null) {
                data.completion_tokens_details = this.completion_tokens_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prompt_tokens != 0)
                writer.writeUint32(1, this.prompt_tokens);
            if (this.completion_tokens != 0)
                writer.writeUint32(2, this.completion_tokens);
            if (this.total_tokens != 0)
                writer.writeUint32(3, this.total_tokens);
            if (this.has_prompt_tokens_details)
                writer.writeMessage(4, this.prompt_tokens_details, () => this.prompt_tokens_details.serialize(writer));
            if (this.has_completion_tokens_details)
                writer.writeMessage(5, this.completion_tokens_details, () => this.completion_tokens_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Usage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Usage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.prompt_tokens = reader.readUint32();
                        break;
                    case 2:
                        message.completion_tokens = reader.readUint32();
                        break;
                    case 3:
                        message.total_tokens = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.prompt_tokens_details, () => message.prompt_tokens_details = ChatCompletion.Prompt_tokens_details.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.completion_tokens_details, () => message.completion_tokens_details = ChatCompletion.Completion_tokens_details.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Usage {
            return Usage.deserialize(bytes);
        }
    }
}
export class ChatCompletionChunk extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        object?: string;
        created?: number;
        model?: string;
        choices?: ChatCompletionChunk.Choices[];
        usage?: ChatCompletion.Usage;
        service_tier?: string;
        system_fingerprint?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("object" in data && data.object != undefined) {
                this.object = data.object;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("model" in data && data.model != undefined) {
                this.model = data.model;
            }
            if ("choices" in data && data.choices != undefined) {
                this.choices = data.choices;
            }
            if ("usage" in data && data.usage != undefined) {
                this.usage = data.usage;
            }
            if ("service_tier" in data && data.service_tier != undefined) {
                this.service_tier = data.service_tier;
            }
            if ("system_fingerprint" in data && data.system_fingerprint != undefined) {
                this.system_fingerprint = data.system_fingerprint;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get object() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set object(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get created() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set created(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get model() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set model(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get choices() {
        return pb_1.Message.getRepeatedWrapperField(this, ChatCompletionChunk.Choices, 5) as ChatCompletionChunk.Choices[];
    }
    set choices(value: ChatCompletionChunk.Choices[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get usage() {
        return pb_1.Message.getWrapperField(this, ChatCompletion.Usage, 6) as ChatCompletion.Usage;
    }
    set usage(value: ChatCompletion.Usage) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_usage() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get service_tier() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set service_tier(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get system_fingerprint() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set system_fingerprint(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        object?: string;
        created?: number;
        model?: string;
        choices?: ReturnType<typeof ChatCompletionChunk.Choices.prototype.toObject>[];
        usage?: ReturnType<typeof ChatCompletion.Usage.prototype.toObject>;
        service_tier?: string;
        system_fingerprint?: string;
    }): ChatCompletionChunk {
        const message = new ChatCompletionChunk({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.object != null) {
            message.object = data.object;
        }
        if (data.created != null) {
            message.created = data.created;
        }
        if (data.model != null) {
            message.model = data.model;
        }
        if (data.choices != null) {
            message.choices = data.choices.map(item => ChatCompletionChunk.Choices.fromObject(item));
        }
        if (data.usage != null) {
            message.usage = ChatCompletion.Usage.fromObject(data.usage);
        }
        if (data.service_tier != null) {
            message.service_tier = data.service_tier;
        }
        if (data.system_fingerprint != null) {
            message.system_fingerprint = data.system_fingerprint;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            object?: string;
            created?: number;
            model?: string;
            choices?: ReturnType<typeof ChatCompletionChunk.Choices.prototype.toObject>[];
            usage?: ReturnType<typeof ChatCompletion.Usage.prototype.toObject>;
            service_tier?: string;
            system_fingerprint?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.object != null) {
            data.object = this.object;
        }
        if (this.created != null) {
            data.created = this.created;
        }
        if (this.model != null) {
            data.model = this.model;
        }
        if (this.choices != null) {
            data.choices = this.choices.map((item: ChatCompletionChunk.Choices) => item.toObject());
        }
        if (this.usage != null) {
            data.usage = this.usage.toObject();
        }
        if (this.service_tier != null) {
            data.service_tier = this.service_tier;
        }
        if (this.system_fingerprint != null) {
            data.system_fingerprint = this.system_fingerprint;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.object.length)
            writer.writeString(2, this.object);
        if (this.created != 0)
            writer.writeUint32(3, this.created);
        if (this.model.length)
            writer.writeString(4, this.model);
        if (this.choices.length)
            writer.writeRepeatedMessage(5, this.choices, (item: ChatCompletionChunk.Choices) => item.serialize(writer));
        if (this.has_usage)
            writer.writeMessage(6, this.usage, () => this.usage.serialize(writer));
        if (this.service_tier.length)
            writer.writeString(7, this.service_tier);
        if (this.system_fingerprint.length)
            writer.writeString(8, this.system_fingerprint);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatCompletionChunk {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatCompletionChunk();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.object = reader.readString();
                    break;
                case 3:
                    message.created = reader.readUint32();
                    break;
                case 4:
                    message.model = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.choices, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ChatCompletionChunk.Choices.deserialize(reader), ChatCompletionChunk.Choices));
                    break;
                case 6:
                    reader.readMessage(message.usage, () => message.usage = ChatCompletion.Usage.deserialize(reader));
                    break;
                case 7:
                    message.service_tier = reader.readString();
                    break;
                case 8:
                    message.system_fingerprint = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatCompletionChunk {
        return ChatCompletionChunk.deserialize(bytes);
    }
}
export namespace ChatCompletionChunk {
    export class Choices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            delta?: ChatCompletion.Message;
            finish_reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
                if ("finish_reason" in data && data.finish_reason != undefined) {
                    this.finish_reason = data.finish_reason;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get delta() {
            return pb_1.Message.getWrapperField(this, ChatCompletion.Message, 2) as ChatCompletion.Message;
        }
        set delta(value: ChatCompletion.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_delta() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get finish_reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set finish_reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            index?: number;
            delta?: ReturnType<typeof ChatCompletion.Message.prototype.toObject>;
            finish_reason?: string;
        }): Choices {
            const message = new Choices({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.delta != null) {
                message.delta = ChatCompletion.Message.fromObject(data.delta);
            }
            if (data.finish_reason != null) {
                message.finish_reason = data.finish_reason;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                delta?: ReturnType<typeof ChatCompletion.Message.prototype.toObject>;
                finish_reason?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.delta != null) {
                data.delta = this.delta.toObject();
            }
            if (this.finish_reason != null) {
                data.finish_reason = this.finish_reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeUint32(1, this.index);
            if (this.has_delta)
                writer.writeMessage(2, this.delta, () => this.delta.serialize(writer));
            if (this.finish_reason.length)
                writer.writeString(3, this.finish_reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Choices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Choices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.delta, () => message.delta = ChatCompletion.Message.deserialize(reader));
                        break;
                    case 3:
                        message.finish_reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Choices {
            return Choices.deserialize(bytes);
        }
    }
}
