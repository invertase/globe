// ignore_for_file: implementation_imports, unnecessary_cast
// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by globe_functions
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:globe_functions/src/build/serializer.dart' show serialize, deserialize, SerializerType;
import 'package:functions/models.dart' as i0;

abstract class RpcBaseClient {
  final String baseUrl;
  final http.Client client;
  final String path;

  RpcBaseClient({
    required this.baseUrl,
    required this.client,
    required this.path,
  });

  String get fullPath => '$baseUrl/$path';
}

class UsersSegment extends RpcBaseClient {
  UsersSegment({
    required super.baseUrl,
    required super.client,
  }) : super(path: 'users');

  UsersDetailsSegment get details => UsersDetailsSegment(
    baseUrl: baseUrl,
    client: client,
  );

}

class UsersDetailsSegment extends RpcBaseClient {
  UsersDetailsSegment({
    required super.baseUrl,
    required super.client,
  }) : super(path: 'users/details');

  Future<String> call() async {
    final response = await client.post(
      Uri.parse(fullPath),
      body: jsonEncode({
        'positional': [],
        'named': {},
      }),
    );
    return response.body as String;
  }

  Future<i0.User> get(String name, {i0.User? user}) async {
    final response = await client.post(
      Uri.parse('$fullPath/get'),
      body: jsonEncode({
        'positional': [serialize(SerializerType.string, name)],
        'named': {'user': serialize(SerializerType.clazz, user)},
      }),
    );
    return i0.User.fromJson(jsonDecode(response.body)["result"]);
  }

  Future<int> getNumer(String name, {i0.User? user, DateTime? date}) async {
    final response = await client.post(
      Uri.parse('$fullPath/getNumer'),
      body: jsonEncode({
        'positional': [serialize(SerializerType.string, name)],
        'named': {'user': serialize(SerializerType.clazz, user), 'date': serialize(SerializerType.dateTime, date)},
      }),
    );
    return deserialize(SerializerType.int, jsonDecode(response.body)["result"]) as int;
  }

  Future<i0.User> updateUserDetails(String userId, List<String> roles, [String? department = 'General', int accessLevel = 1]) async {
    final response = await client.post(
      Uri.parse('$fullPath/updateUserDetails'),
      body: jsonEncode({
        'positional': [serialize(SerializerType.string, userId), serialize(SerializerType.list, roles), serialize(SerializerType.string, department), serialize(SerializerType.int, accessLevel)],
        'named': {},
      }),
    );
    return i0.User.fromJson(jsonDecode(response.body)["result"]);
  }

  Future<i0.User> createUserProfile(String name, {required List<String> permissions, String? title, Map<String, dynamic> metadata = const {}, bool isActive = true, int priority = 0}) async {
    final response = await client.post(
      Uri.parse('$fullPath/createUserProfile'),
      body: jsonEncode({
        'positional': [serialize(SerializerType.string, name)],
        'named': {'permissions': serialize(SerializerType.list, permissions), 'title': serialize(SerializerType.string, title), 'metadata': serialize(SerializerType.map, metadata), 'isActive': serialize(SerializerType.bool, isActive), 'priority': serialize(SerializerType.int, priority)},
      }),
    );
    return i0.User.fromJson(jsonDecode(response.body)["result"]);
  }

}

class RpcClient {
  final String baseUrl;
  final http.Client client;

  RpcClient(this.baseUrl, [http.Client? _client]) : client = _client ?? http.Client();

  UsersSegment get users => UsersSegment(
    baseUrl: baseUrl,
    client: client,
  );
}
