// GENERATED CODE - DO NOT MODIFY BY HAND
// This file was generated by shelf_rpc.
// ignore_for_file: non_constant_identifier_names, unused_local_variable, implementation_imports, no_leading_underscores_for_local_identifiers, prefer_null_aware_operators

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:globe_functions/src/spec/serializer.dart';
import 'package:globe_functions/src/client/rpc_http_client.dart';
import 'package:functions/models.dart' as i0;
import 'package:functions/rpc.dart' as i1;

class RpcClient extends RpcHttpClient {
  RpcClient._({required super.uri, super.client});

  static RpcApiClientEntrypoint api({required Uri uri, http.Client? client}) =>
      RpcApiClientEntrypoint(RpcClient._(uri: uri, client: client));
}

abstract base class _RpcGeneratedClient {
  final RpcClient client;
  const _RpcGeneratedClient(this.client);
}

final class RpcApiNestedClient extends _RpcGeneratedClient {
  const RpcApiNestedClient(super.client);
  Future<String> sub1() async {
    final positional = [];
    final named = <String, dynamic>{};

    final body = jsonEncode({
      "id": "nested.sub1",
      "params": {"positional": positional, "named": named},
    });

    final result = await client.postRequest(
      "nested.sub1",
      namedParams: named,
      positionalParams: positional,
    );

    return Serializers.instance.get<String>().deserialize(result);
  }

  RpcApiNestedSub2Client get sub2 => RpcApiNestedSub2Client(client);
}

final class RpcApiNestedSub2Client extends _RpcGeneratedClient {
  const RpcApiNestedSub2Client(super.client);
  Future<String> sub3() async {
    final positional = [];
    final named = <String, dynamic>{};

    final body = jsonEncode({
      "id": "nested.sub2.sub3",
      "params": {"positional": positional, "named": named},
    });

    final result = await client.postRequest(
      "nested.sub2.sub3",
      namedParams: named,
      positionalParams: positional,
    );

    return Serializers.instance.get<String>().deserialize(result);
  }
}

final class RpcApiClientEntrypoint extends _RpcGeneratedClient {
  const RpcApiClientEntrypoint(super.client);

  RpcApiNestedClient get nested => RpcApiNestedClient(client);

  Future<String> params(
    i0.User? user, {
    int? age,
    String? email,
    Map<String, String?>? meta,
    required String name,
  }) async {
    final positional = [];
    final named = <String, dynamic>{};
    positional.add(user == null ? null : user.toJson());
    named["age"] =
        age == null ? null : Serializers.instance.get<int>().serialize(age);
    named["email"] =
        email == null
            ? null
            : Serializers.instance.get<String>().serialize(email);
    named["meta"] =
        meta == null
            ? null
            : meta.map(
              (key, value) => MapEntry(
                key,
                value == null
                    ? null
                    : Serializers.instance.get<String>().serialize(value),
              ),
            );
    named["name"] = Serializers.instance.get<String>().serialize(name);

    final body = jsonEncode({
      "id": "params",
      "params": {"positional": positional, "named": named},
    });

    final result = await client.postRequest(
      "params",
      namedParams: named,
      positionalParams: positional,
    );

    return Serializers.instance.get<String>().deserialize(result);
  }
}
